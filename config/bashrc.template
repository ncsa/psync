# INSTRUCTIONS:
# 1. copy this file to bashrc
# 2. edit bashrc - set the variables to match the local environment

###
### Variables used by other psync startup scripts
###

#
# PYLUT specific settings
#

# PYLUTBASEDIR - if pylut lib is in ~user/pylut/pylut.py
#                 then PYLUTBASEDIR=~user/pylut
export PYLUTBASEDIR=~user/pylut

# PYLUTRSYNCPATH - path to rsync (must be set for pylut library)
export PYLUTRSYNCPATH=/usr/bin/rsync

# PYLUTLFSPATH - path to lfs (must be set for pylut library)
export PYLUTLFSPATH=/sw/user/scripts/lfs

# PYLUTRSYNCMAXSIZE - max filesize in bytes that will be copied using rsync
#                     files larger that this will be copied using dd
export PYLUTRSYNCMAXSIZE=536870912

#
# PSYNC specific settings
#

# PSYNCBASEDIR - if psync is in ~user/psync/lib/psync.py
#             then PSYNCBASEDIR=~user/psync
export PSYNCBASEDIR=~user/psync

# Python Venv where celery, cbor, redis, rmq are installed
export PSYNCVENVDIR=$PSYNCBASEDIR/venv

# Path where redis and rmq servers write their data and log files
# Using a shared filesystem allows easy access to log files
# the filesystem supports(ie: Lustre set stripecount)
export PSYNCVARDIR=$PSYNCBASEDIR/var

# Path where psync/bin/get_psync_logs.sh will write log files
# Note: log files can get very large (50-100GB).  It may be good practice to
# pre-create the log directory with any optimizations the filesystem supports
# (ie: Lustre stripecount)
export PSYNCLOGDIR=$PSYNCBASEDIR/var/log

# PSYNCSOFTTIMEOUT
# PSYNCHARDTIMEOUT
# Max time to allow a task to run. 
# Softtimeout gives psync a chance to clean up.
# Hardtimelimit kills the task outright.
export PSYNCSOFTTIMEOUT=14400  #4 hours
export PSYNCHARDTIMEOUT=14700  #4 hours + 5 mins

# PSYNCCONCURRENCY
# Max Number of procs to run on each worker node
# Can run less than max using set_pool_size
export PSYNCCONCURRENCY=8

###
### Message queue settings
###

# IP inet (cidr) prefix
# Redis start script will look for a local ip on this network only and bind to it
# All workers, RMQ and Redis must connect to this network
export PSYNCINETPREFIX="10.128/14"

# Broker type: rmq or redis
# DO NOT USER REDIS as broker unless you like pain.
# (Redis does not scale and WILL FAIL in production,
# use redis only for debugging on a single node)
# If you really must know more details, google "redis duplicate tasks"
export PSYNCBROKERTYPE=rmq

#
# RabbitMQ specific
#

# Set a random username and password for RMQ
export PSYNCRMQUSER=some_random_string
export PSYNCRMQPASS=another_random_string
export PSYNCRMQVHOST=PSYNCVHOST

# RABBITMQ_HOME - path to rabbitmq install directory
export RABBITMQ_HOME=/path/to/rabbitmq_server-3.5.6

# a valid user to run rmq service as
export RABBITMQ_RUNASUSER=username

# path to 'erl' executable
export PATHTOERL=/path/to/lib/erlang/bin/erl


#######################################
###                                 ###
### END OF USER CONFIGURED SETTINGS ###
###                                 ###
#######################################

export PSYNCBROKERURLFILE="${PSYNCBASEDIR}/config/broker_url.py"

export PSYNCRMQURLFILE="${PSYNCBASEDIR}/config/rmq_celery_conf.py"

export PSYNCREDISURLFILE="${PSYNCBASEDIR}/config/redis_celery_conf.py"

export PYTHONPATH=${PSYNCBASEDIR}/lib:${PSYNCBASEDIR}/config:${PYLUTBASEDIR}
